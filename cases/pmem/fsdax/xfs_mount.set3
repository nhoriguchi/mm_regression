#! {"reflink" => "0"}
#! {"reflink" => "1"}

. $TRDIR/lib/dax.sh

TEST_TYPE=devel

PMEMDIR=/mnt/pmem
NAMESPACE=

<% if param["reflink"] == "0" %>
REFLINK=<%= param["reflink"] %>
EXPECTED_RETURN_CODE="MOUNT_PASS DAX"
<% else %>
REFLINK=<%= param["reflink"] %>
EXPECTED_RETURN_CODE="MOUNT_FAIL"
<% end %>

_prepare() {
	umount -f $PMEMDIR
	local oldpmemdir=$(mount | grep "^/dev/$PMEMDEV " | cut -f3 -d' ')
	[ "$oldpmemdir" ] && umount -f $oldpmemdir
	mkdir -p $PMEMDIR
}

_cleanup() {
	rm -rf $PMEMDIR/*
	umount -f $PMEMDIR
	rm -rf $PMEMDIR/
}

_control() {
	mkfs.xfs -f -m reflink=$REFLINK -d su=2m,sw=1 /dev/$PMEMDEV || return 1
	mount -o dax /dev/$PMEMDEV $PMEMDIR
	if [ "$?" -ne 0 ] ; then
		set_return_code MOUNT_FAIL
		return 1
	fi
	set_return_code MOUNT_PASS
	touch $PMEMDIR/test
	export SET_STATX_ATTR_DAX=true
	./lib/test_dax $PMEMDIR/test 0x200000 write > $TMPD/out &
	local pid=$!
	sleep 1
	mount | grep $PMEMDIR > $TMPD/mount
	getfattr -d $PMEMDIR/test
	cp /proc/$pid/smaps $TMPD/smaps
	cp /proc/$pid/numa_maps $TMPD/numa_maps
	page-types -p $pid -Nrl > $TMPD/pagemap
	kill -9 $pid

	umount /dev/$PMEMDEV

	local pfn=$(grep ^700000000 $TMPD/pagemap | cut -f2)

	if [ "$pfn" ] && check_dax "0x$pfn" ; then
		set_return_code DAX
	else
		set_return_code NODAX
	fi
}
