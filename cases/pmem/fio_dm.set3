#! {"type" => "libpmem", "nt" => "true" , "sync" => "true" }
#! {"type" => "pmemblk"}
#! {"type" => "fsdax"}

. $TRDIR/lib/mm.sh

TEST_TYPE=performance

PMEMDIR=/mnt/pmemfio
DEVNAME=

NSMODE=fsdax
NUMA_NODE=2

_prepare() {
	if ! which fio > /dev/null ; then
		echo "fio is not available, skipped." >&2
		return 1
	fi

	umount -f /dev/pmem*
	ndctl destroy-namespace -f all

	NAMESPACE=$(ndctl list | jq ".[] | select(.name == \"$RECIPE_FILE\") | .dev")
	if [ ! "$NAMESPACE" ] ; then
		ndctl create-namespace -f -m $NSMODE -s 108G -r region0 -n "$RECIPE_FILE" > $TMPD/ns1 || return 1
		ndctl create-namespace -f -m $NSMODE -s 108G -r region1 -n "$RECIPE_FILE" > $TMPD/ns2 || return 1
	fi

	NAMESPACE=($(ndctl list | jq -r ".[] | select(.name == \"$RECIPE_FILE\") | .dev"))
	DEVNAME=($(ndctl list | jq -r ".[] | select(.name == \"$RECIPE_FILE\") | .blockdev"))

	echo -e "0 $[$(blockdev --getsz /dev/${DEVNAME[0]}) + $(blockdev --getsz /dev/${DEVNAME[1]})] striped 2 4096 /dev/${DEVNAME[0]} 0 /dev/${DEVNAME[1]} 0" | sudo dmsetup create striped-pmem

	lsblk /dev/mapper/striped-pmem
	dmsetup info striped-pmem

	mkdir -p $PMEMDIR
	mkfs.xfs -f -m reflink=0 -d su=2m,sw=2 /dev/mapper/striped-pmem || return 1
	mount -o dax /dev/mapper/striped-pmem $PMEMDIR
	rm -f $PMEMDIR/*
}

_cleanup() {
	umount /dev/mapper/striped-pmem
	rm -rf $PMEMDIR/*
	dmsetup remove --force /dev/mapper/striped-pmem
	ndctl destroy-namespace $NAMESPACE --force
	rm -rf $PMEMDIR/
}

_control() {
	local cpus="1 2 4 8 16 32 64"
	local bsizes="4k 2m"
	local fsizes="16g" # 32g 64g
	local rtimes=30

	cpus="1 2 4 8 16 32"

	<% if param["type"] == "pmemblk" %>
	local fiotypes="pmemblk"
	export FILENAME=$PMEMDIR/testfile
	<% elsif param["type"] == "libpmem" %>
	local fiotypes="libpmem"
	export FILENAME=$PMEMDIR/testfile
	<% elsif param["type"] == "fsdax" %>
	local fiotypes="fsdax_mmap fsdax_syswrite"
	export FILENAME=$PMEMDIR/testfile
	<% end %>

	<% if param["nt"] == "true" %>
	export DIRECT=1
	<% elsif param["nt"] == "false" %>
	export DIRECT=0
	<% end %>

	<% if param["sync"] == "true" %>
	export SYNC=1
	<% elsif param["sync"] == "false" %>
	export SYNC=0
	<% end %>

	for fsize in $fsizes ; do
	for rtime in $rtimes ; do
	for cpu in $cpus ; do
	for bsize in $bsizes ; do
	for fiotype in $fiotypes ; do
		local tmp2=$TMPD/c${cpu}_bs${bsize}
		mkdir -p $tmp2

		export NUMJOBS=$cpu
		export BSIZE=$bsize
		export FILESIZE=$fsize
		export RUNTIME=$rtime
		# todo: directory mode (libpmem)
		fio --output=$tmp2/${fiotype}.json --output-format=json misc/fio/${fiotype}.fio
	done
	done
	done
	done
	done
}
