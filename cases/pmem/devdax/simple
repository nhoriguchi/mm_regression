TEST_TYPE=devel

DEVNAME=
MAP=mem
EXPECTED_RETURN_CODE="EXIT"

_prepare() {
	check_binary test_dax || return 1

	ndctl list | jq ".[] | select(.name == \"$RECIPE_FILE\")" | tee $TMPD/namespace
	for ns in $(jq -r .dev $TMPD/namespace) ; do
		ndctl destroy-namespace -f $ns
	done
	ndctl create-namespace -f -m devdax --map=$MAP -s 6G -n "$RECIPE_FILE" | tee $TMPD/ns || return 1
	ndctl list | jq ".[] | select(.name == \"$RECIPE_FILE\")" | tee $TMPD/namespace
	NAMESPACE=/dev/$(jq -r .dev $TMPD/namespace)
	DEVNAME=/dev/$(jq -r .chardev $TMPD/namespace)

	echo "dax device is $NAMESPACE, $DEVNAME"
}

_cleanup() {
	ndctl destroy-namespace $NAMESPACE --force
}

_control() {
	echo "test_dax $DEVNAME 0x200000 write 0x1000 (MAP_SYNC: ${MAP_SYNC:-false})"
	REPEATS=1 test_dax $DEVNAME 0x200000 write 0x1000
	if [ $? -ne 0 ] ; then
		set_return_code DEVDAX_MAPPING_WRITE_FAIL
	fi

	REPEATS=1 test_dax $DEVNAME 0x200000 read 0x1000
	if [ $? -ne 0 ] ; then
		set_return_code DEVDAX_MAPPING_READ_FAIL
	fi

	set_return_code EXIT
}
