#! {"backend" => "buddy", "error" => "hard-offline"}
#! {"backend" => "buddy", "error" => "soft-offline"}
#! {"backend" => "hugetlb_free", "error" => "hard-offline"}
#! {"backend" => "hugetlb_free", "error" => "soft-offline"}
#! {"backend" => "anonymous", "error" => "hard-offline"}
#! {"backend" => "anonymous", "error" => "soft-offline"}
#! {"backend" => "pagecache", "error" => "hard-offline"}
#! {"backend" => "pagecache", "error" => "soft-offline"}
#! {"backend" => "hugetlb_anon", "error" => "hard-offline"}
#! {"backend" => "hugetlb_anon", "error" => "soft-offline"}
#! {"backend" => "hugetlb_shmem", "error" => "hard-offline"}
#! {"backend" => "hugetlb_shmem", "error" => "soft-offline"}
#! {"backend" => "hugetlb_file", "error" => "hard-offline"}
#! {"backend" => "hugetlb_file", "error" => "soft-offline"}
#! {"backend" => "ksm", "error" => "hard-offline"}
#! {"backend" => "ksm", "error" => "soft-offline"}
#! {"backend" => "thp", "error" => "hard-offline"}
#! {"backend" => "thp", "error" => "soft-offline"}
#! {"backend" => "zero", "error" => "hard-offline"}
#! {"backend" => "zero", "error" => "soft-offline"}
#! {"backend" => "huge_zero", "error" => "hard-offline"}
#! {"backend" => "huge_zero", "error" => "soft-offline"}

TEST_PRIORITY=12
TEST_TYPE=stress

. $TRDIR/lib/setup_mce_test.sh

EXPECTED_RETURN_CODE="EXIT"

BACKEND=<%= param["backend"] %>
ERROR_TYPE=<%= param["error"] %>
TARGET_PAGEFLAGS=$(get_backend_pageflags $BACKEND)

<% if param["backend"] =~ /(buddy|ksm|zero)/ %>
SKIP_THIS_TEST=true
<% end %>

THP=100
HUGETLB=300
HUGEPAGESIZE=2048

<% if param["backend"] == "ksm" %>
KSM=true
<% end %>

TIMEOUT=10

random_poison() {
	echo "random_poison thread running ..."
	while read line ; do
		$MCEINJECT -e "$ERROR_TYPE" -a "$line" > /dev/null 2>&1
	done < $TMPD/target_pfns
}

random_unpoison() {
	echo "random_unpoison thread running ..."
	while true ; do
		all_unpoison > /dev/null 2>&1
	done
}

_prepare() {
	flagmask="$(get_backend_pageflags_mask_value $BACKEND)"
	maskbits="$(echo $flagmask | cut -f1 -d,)"
	valuebits="$(echo $flagmask | cut -f2 -d,)"

	<% if param["backend"] =~ /hugetlb/ %>
	sysctl vm.nr_hugepages=20
	<% end %>

	echo "set hwpoison-filter for $BACKEND (mask:$maskbits, value:$valuebits)"
	echo $maskbits > $DEBUGFSDIR/hwpoison/corrupt-filter-flags-mask
	echo $valuebits > $DEBUGFSDIR/hwpoison/corrupt-filter-flags-value
	echo 1 > $DEBUGFSDIR/hwpoison/corrupt-filter-enable
	trap '' BUS
	return 0
}

_cleanup() {
	trap -- BUS
	<% if param["backend"] =~ /hugetlb/ %>
	sysctl vm.nr_hugepages=0
	<% end %>
	echo 0 > $DEBUGFSDIR/hwpoison/corrupt-filter-enable
}

_control() {
	local pid=

	<% if param["backend"] !~ /(buddy|hugetlb_free)/ %>
	test_alloc_generic -B $BACKEND -N 32 -L 'mmap access'
	echo_log "test_alloc_generic -B $BACKEND -N 32 -L 'mmap access busyloop' &"
	test_alloc_generic -B $BACKEND -N 32 -L 'mmap access busyloop' &
	pid=$!
	sleep 0.1
	if ! check_process_status $pid ; then
		set_return_code ERROR
		return
	fi
	get_mm_stats 1 $pid
	<% end %>

	random_unpoison &
	local pid_unpoison=$!
	echo_log "background unpoisoner ($pid_unpoison) running ..."
	echo_log "target pageflags: $TARGET_PAGEFLAGS"

	# if backend is pagecache, takes a few second to be parepared. so better
	# method to wait is necessary.
	sleep 2
	<% if param["backend"] !~ /(buddy|hugetlb_free)/ %>
	page-types -Nrl -b "$TARGET_PAGEFLAGS" -p $pid -a 0x700000000+0x10000000 \
		| grep -v offset | cut -f2 | sed -e 's/^/0x/' > $TMPD/target_pfns
	<% else %>
	page-types -Nrl -b "$TARGET_PAGEFLAGS" | grep -v offset | \
		cut -f1 | sed -e 's/^/0x/' > $TMPD/target_pfns
	<% end %>

	random_poison &
	local pid_poison=$!
	if [ ! -s $TMPD/target_pfns ] ; then
		set_return_code NO_TARGET_PFN
	else
		echo_log "Running poison/unpoison threads for $TIMEOUT seconds ..."
		sleep $TIMEOUT
	fi
	kill -9 $pid_poison $pid_unpoison 2> /dev/null

	if [ "$pid" ] ; then
		get_mm_stats 2 $pid
		echo "kill -SIGUSR1 $pid"
		check_process_status $pid && kill -SIGUSR1 $pid
	fi

	cleanup_hugetlb_config

	set_return_code EXIT
}
