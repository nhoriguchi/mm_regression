#!2 MIGRATE_SRC: migratepages
#!2 RACE_SRC: race_with_gup race_with_process_vm_access race_with_map_fault_unmap race_with_fork race_with_mremap race_with_procpid
# race_with_madv_free

#!3 MIGRATE_SRC: mbind
#!3 OPERATION: partial

#! {"migtype" => "migratepages", "race" => "gup"}
#! {"migtype" => "migratepages", "race" => "process_vm_access"}
#! {"migtype" => "migratepages", "race" => "map_fault_unmap"}
#! {"migtype" => "migratepages", "race" => "fork"}
#! {"migtype" => "migratepages", "race" => "mremap"}
#! {"migtype" => "migratepages", "race" => "procpid"}
##! {"migtype" => "migratepages", "race" => "madv_free"}
#! {"migtype" => "mbind", "op" => "partial"}

. $TRDIR/lib/setup_page_migration.sh

MIGRATE_SRC=<%= param["migtype"] %>
RACE_SRC=<%= param["race"] %>
NUMA_NODE=2
THP=10

BACKEND=thp

<% if param["race"] == "gup" %>
	# EXPECTED_RETURN_CODE="MIGRATION_PASSED HUGEPAGE_MIGRATED THP_SPLIT EXIT"
	# madv_soft calls get_user_pages()
	TEST_PROGRAM="test_alloc_generic -B $BACKEND -N $THP -L 'start:wait_after mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access:wait_after madv_soft munmap:wait_before exit:wait_before'"
	# BUG_ON in mm/vmscan.c:1430
<% elsif param["race"] == "procpid" %>
	EXPECTED_RETURN_CODE="EXIT"
	TEST_PROGRAM="test_alloc_generic -B $BACKEND -N $THP -L 'mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access madv_soft:wait_before:wait_after'"
	_control() {
		local pid="$1"
		local line="$2"

		echo_log "$line"
		case "$line" in
			"before_madv_soft")
				( while true ; do
					  page-types -p $pid -Nlr -a 0x700000000+0x10000000 > /dev/null
					  cat /proc/$pid/numa_maps > /dev/null
					  cat /proc/$pid/maps > /dev/null
					  cat /proc/$pid/smaps > /dev/null
				  done ) &
				echo $! > $TMPD/procpid_pid
				kill -SIGUSR1 $pid
				;;
			"after_madv_soft")
				kill -9 $(cat $TMPD/procpid_pid)
				sleep 0.2
				kill -SIGUSR1 $pid
				set_return_code EXIT
				return 0
				;;
			*)
				;;
		esac
		return 1
	}
<% elsif param["race"] == "process_vm_access" %>
	# TODO: really need busyloop flag?
	# TODO: apply backword_keyword. updated to PMD_SPLIT from THP_NOT_SPLIT <2020-06-29 Mon 15:33>
	# EXPECTED_RETURN_CODE="MIGRATION_PASSED HUGEPAGE_MIGRATED PMD_SPLIT EXIT"
	TEST_PROGRAM="test_alloc_generic -B $BACKEND -N $THP -L 'start:wait_after mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access:wait_after process_vm_access:busyloop munmap:wait_before exit:wait_before'"
<% elsif param["race"] == "map_fault_unmap" %>
	_control() {
		for i in $(seq 5) ; do
			test_alloc_generic -B thp -N 10 -L iterate_mapping &
			local pid=$!
			sleep 0.3
			for j in $(seq 100) ; do
				page-types -p $pid -Nl -b thp,compound_head=thp,compound_head | grep -v offset > $TMPD/pagetypes1
				do_migratepages $pid 0 1
				page-types -p $pid -Nl -b thp,compound_head=thp,compound_head | grep -v offset > $TMPD/pagetypes2
				do_migratepages $pid 1 0
				# echo $j
				# cat $TMPD/pagetypes1 $TMPD/pagetypes2
				diff -u $TMPD/pagetypes1 $TMPD/pagetypes2 >&2
			done
			kill -SIGUSR1 $pid 2> /dev/null
		done
		set_return_code EXIT
	}
	EXPECTED_RETURN_CODE="EXIT"
<% elsif param["race"] == "fork" %>
	# BUG_ON in cow path
	_control() {
		for i in $(seq 5) ; do
			test_alloc_generic -B thp -N $THP -L "start mmap access fork_stress" &
			local pid=$!
			sleep 0.3
			for j in $(seq 100) ; do
				# get_pagetypes $pid pagetypes.1 -Nrlb thp,compound_head=thp,compound_head > /dev/null
				do_migratepages $pid 0 1
				# get_pagetypes $pid pagetypes.2 -Nrlb thp,compound_head=thp,compound_head > /dev/null
				do_migratepages $pid 1 0
				# diff -u $TMPD/pagetypes.1 $TMPD/pagetypes.2 >&2
			done
			kill -SIGUSR1 $pid 2> /dev/null
		done
		set_return_code EXIT
	}
	EXPECTED_RETURN_CODE="EXIT"
<% elsif param["race"] == "mremap" %>
	true
<% else %>
	# no race mbind/partial case
	EXPECTED_RETURN_CODE="MIGRATION_PASSED HUGEPAGE_MIGRATED PMD_SPLIT EXIT"
	TEST_PROGRAM="test_alloc_generic -B $BACKEND -N $THP -L 'start:wait_after mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access:wait_after mbind:hp_partial munmap:wait_before exit:wait_before'"
<% end %>
