#! {"backend" => "hugetlb_anon", "migtype" => "migratepages", "race" => "iterate_mapping"}
#! {"backend" => "hugetlb_anon", "migtype" => "migratepages", "race" => "gup"}
#! {"backend" => "hugetlb_anon", "migtype" => "migratepages", "race" => "mremap_stress"}
#! {"backend" => "hugetlb_anon", "migtype" => "migratepages", "race" => "iterate_fault_dontneed"}
#! {"backend" => "hugetlb_anon", "migtype" => "move_pages", "race" => "iterate_mapping"}
#! {"backend" => "hugetlb_anon", "migtype" => "move_pages", "race" => "gup"}
#! {"backend" => "hugetlb_anon", "migtype" => "move_pages", "race" => "mremap_stress"}
#! {"backend" => "hugetlb_anon", "migtype" => "move_pages", "race" => "iterate_fault_dontneed"}
#! {"backend" => "thp", "migtype" => "migratepages", "race" => "iterate_mapping"}
#! {"backend" => "thp", "migtype" => "migratepages", "race" => "gup"}
#! {"backend" => "thp", "migtype" => "migratepages", "race" => "mremap_stress"}
#! {"backend" => "thp", "migtype" => "migratepages", "race" => "iterate_fault_dontneed"}
#! {"backend" => "thp", "migtype" => "move_pages", "race" => "iterate_mapping"}
#! {"backend" => "thp", "migtype" => "move_pages", "race" => "gup"}
#! {"backend" => "thp", "migtype" => "move_pages", "race" => "mremap_stress"}
#! {"backend" => "thp", "migtype" => "move_pages", "race" => "iterate_fault_dontneed"}

# TODO: race with madv_free

. $TRDIR/lib/setup_page_migration.sh

TEST_TYPE=stress

BACKEND=<%= param["backend"] %>
MIGRATE_SRC=<%= param["migtype"] %>
RACE_SRC=<%= param["race"] %>

NUMA_NODE=2

<% if param["backend"] =~ /hugetlb/ %>
HUGETLB=300
HUGEPAGESIZE=2048 # kB
<% elsif param["backend"] =~ /thp/ %>
THP=true
<% end %>

EXPECTED_RETURN_CODE="EXIT"

ITERATE=10
WAITSEC=3

run_race_src() {
	<% if param["race"] == "iterate_mapping" %>
	test_alloc_generic -B $BACKEND -N 10 -L iterate_mapping > /dev/null 2>&1
	<% elsif param["race"] == "gup" %>
	# how to wait allocation done?
	test_alloc_generic -B $BACKEND -N 100 -L 'start mmap access:wait_after madv_soft' > /dev/null 2>&1 &
	local mypid=$!
	sleep 2
	kill -SIGUSR1 $mypid
	<% elsif param["race"] == "mremap_stress" %>
	test_alloc_generic -B $BACKEND -N 10 -L 'start mmap access mremap_stress' > /dev/null 2>&1
	<% elsif param["race"] == "iterate_fault_dontneed" %>
	exec test_alloc_generic -B $BACKEND -N 10 -L iterate_fault_dontneed > /dev/null 2>&1
	<% end %>
}

run_migrate_src() {
	<% if param["migtype"] == "migratepages" %>
	for j in $(seq 100) ; do
		migratepages $(pgrep -f test_alloc_generic) 0 1 > /dev/null 2>&1
		migratepages $(pgrep -f test_alloc_generic) 1 0 > /dev/null 2>&1
	done
	<% elsif param["migtype"] == "move_pages" %>
	test_iterate_numa_move_pages 10 $(pgrep -f test_alloc_generic) > /dev/null 2>&1
	<% end %>
}

_prepare() {
	check_binary test_iterate_numa_move_pages || return 1
}

_control() {
	get_mm_stats 1
	for i in $(seq $ITERATE) ; do
		echo "==> iterate $i"
		run_race_src &
		# echo "run_migrate_src $pidhuge &"
		run_migrate_src &
		local pidmove=$!
		sleep $WAITSEC
		disown -a
		pkill -SIGKILL -f test_alloc_generic > /dev/null 2>&1
		kill -SIGTERM $pidmove > /dev/null 2>&1
	done
	get_mm_stats 2
	set_return_code EXIT
}
