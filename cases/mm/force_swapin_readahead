TEST_TYPE=wip

. $TRDIR/lib/setup_mmgeneric.sh
. $TRDIR/lib/setup_memcg.sh

TEST_PROGRAM="test_alloc_generic -v -B anonymous -n 0x3800 -L 'start:wait_after mmap access:wait_after madvise:advice=willneed munmap:wait_before exit:wait_before'"
EXPECTED_RETURN_CODE="EXIT"

_prepare() {
	local swapfile=$TDIR/swapfile
	create_cgroup || return 1
	dd if=/dev/zero of=$swapfile bs=4096 count=10240 > /dev/null 2>&1
	[ $? -ne 0 ] && echo "failed to create $swapfile" && return 1
	mkswap $swapfile
	chmod 0600 $swapfile
	swapon $swapfile
	count_testcount
	if swapon -s | grep ^$swapfile > /dev/null ; then
		count_success "create swapfile"
	else
		count_failure "create swapfile"
	fi
	echo 3 > /proc/sys/vm/drop_caches

	if [ "$CGROUPVER" = v1 ] ; then
		set_cgroup_value memory test1 memory.limit_in_bytes 0x1000000 || return 1
	elif [ "$CGROUPVER" = v2 ] ; then
		set_cgroup_value test1 memory.high 0x1000000 || return 1
	fi

	set_thp_never
	return 0
}

_cleanup() {
	set_thp_always
	swapoff $TDIR/swapfile
	rm -rf $TDIR/swapfile
	delete_cgroup
}

_control() {
	local pid="$1"
	local line="$2"

	echo_log "$line"
	case "$line" in
		"after_start")
			move_process_cgroup test1 $pid || set_return_code CGCLASSIFY_FAIL
			kill -SIGUSR1 $pid
			;;
		"after_access")
			get_mm_stats 1 $pid
			if [ "$CGROUPVER" = v1 ] ; then
				set_cgroup_value memory test1 memory.limit_in_bytes 0x8000000 || set_return_code CGSET_FAIL
			elif [ "$CGROUPVER" = v2 ] ; then
				set_cgroup_value test1 memory.high 0x8000000 || set_return_code CGSET_FAIL
			fi
			page-types -p $pid -r -a 0x700000000+0x10000000
			kill -SIGUSR1 $pid
			;;
		"before_munmap")
			get_mm_stats 2 $pid
			kill -SIGUSR1 $pid
			;;
		"before_exit")
			kill -SIGUSR1 $pid
			set_return_code EXIT
			return 0
			;;
	esac
	return 1
}

_check() {
	FALSENEGATIVE=true
	count_testcount
	if [ "$(grep ^Swap: $TMPD/smaps.1 2> /dev/null | awk '{print $2}')" -gt 0 ] ; then
		count_success "swap used"
	else
		count_failure "swap not used"
	fi
	count_testcount
	if [ "$(grep ^Swap: $TMPD/smaps.2 2> /dev/null | awk '{print $2}')" -eq 0 ] ; then
		count_success "swapped in forcibly"
	else
		count_failure "swap still remains ($(grep ^Swap: $TMPD/smaps.2 | awk '{print $2}') kB) after madvise(MADV_WILLNEED)"
	fi
	FALSENEGATIVE=false

	count_testcount
	local sc1=$(grep ^SwapCached: $TMPD/meminfo.1 2> /dev/null | awk '{print $2}')
	local sc2=$(grep ^SwapCached: $TMPD/meminfo.2 2> /dev/null | awk '{print $2}')
	if [ "$sc1" -lt "$sc2" ] ; then
		count_success "some swap data is loaded on swapcache forcibly"
	else
		count_failure "swapin didn't work (before $sc1, after $sc2)"
	fi
}
