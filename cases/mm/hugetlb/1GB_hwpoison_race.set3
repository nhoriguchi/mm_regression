#! {"type" => "file", "offline" => "hard"}
#! {"type" => "file", "offline" => "soft"}
#! {"type" => "anon", "offline" => "hard"}
#! {"type" => "anon", "offline" => "soft"}

TEST_TYPE=devel
TEST_PRIORITY=16

. $TRDIR/lib/setup_mce_test.sh || exit 1

HUGETLBFSDIR=tmp/hugetlbfs

HUGETLBTYPE=<%= param["type"] %>
OFFLINE=<%= param["offline"] %>

EXPECTED_RETURN_CODE="EXIT"

. $TRDIR/lib/setup_1GB_hugetlb.sh
. $TRDIR/lib/setup_mmgeneric.sh
. $TRDIR/lib/mce.sh

PIPETIMEOUT=30
HUGEPAGESIZE=1048576

RACE_ITERATIONS=10

_prepare() {
	prepare_mm_generic || return 1
	save_nr_corrupted_before
	prepare_1GB_hugetlb || return 1
}

_cleanup() {
	save_nr_corrupted_inject
	cleanup_mm_generic
	cleanup_1GB_hugetlb
}

_control() {
	for i in $(seq $RACE_ITERATIONS) ; do
		hugetlb_1gb iterate_mapping:type=$HUGETLBTYPE &
		local pid=$!
		sleep 0.$RANDOM

		# right way to get target hugepage?
		page-types -b compound_head,huge=compound_head,huge -rlN | grep -v offset | cut -f-3 | tee $TMPD/pagemap.1
		local pfn=0x$(head -n1 $TMPD/pagemap.1 | cut -f1)
		echo "targetpfn: $pfn"
		if [ "$pfn" != 0x ] ; then
			echo "$MCEINJECT -q -e ${OFFLINE}-offline -a $pfn"
			$MCEINJECT -q -e ${OFFLINE}-offline -a $pfn
		fi
		page-types -b compound_head,huge=compound_head,huge -rlN | grep -v offset
		grep pgmig /proc/vmstat
		kill_all_subprograms $BASHPID
		all_unpoison
		echo 4 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages
	done

	set_return_code EXIT
}

_check() {
	save_nr_corrupted_unpoison
	# check_nr_hwcorrupted
	# <% if param["offline"] == "hard" or param["offline"] == "madvhard" %>
	# check_kernel_message "recovery action for huge page: Recovered"
	# <% end %>
}
