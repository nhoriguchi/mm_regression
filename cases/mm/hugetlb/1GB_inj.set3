#! {"type" => "free", "offline" => "hard"}
#! {"type" => "free", "offline" => "soft"}
#! {"type" => "file", "offline" => "hard"}
#! {"type" => "file", "offline" => "soft"}
#! {"type" => "file", "offline" => "hard", "access" => "memwrite"}
#! {"type" => "file", "offline" => "soft", "access" => "memwrite"}
#! {"type" => "file", "offline" => "hard", "access" => "syswrite"}
#! {"type" => "file", "offline" => "soft", "access" => "syswrite"}
#! {"type" => "anon", "offline" => "hard"}
#! {"type" => "anon", "offline" => "soft"}
#! {"type" => "anon", "offline" => "hard", "access" => "memwrite"}
#! {"type" => "anon", "offline" => "soft", "access" => "memwrite"}
#! {"type" => "shmem", "offline" => "hard"}
#! {"type" => "shmem", "offline" => "soft"}

#! {"type" => "file", "offline" => "madvhard"}
#! {"type" => "file", "offline" => "madvsoft"}
#! {"type" => "file", "offline" => "madvhard", "access" => "memwrite"}
#! {"type" => "file", "offline" => "madvsoft", "access" => "memwrite"}
#! {"type" => "file", "offline" => "madvhard", "access" => "syswrite"}
#! {"type" => "file", "offline" => "madvsoft", "access" => "syswrite"}
#! {"type" => "anon", "offline" => "madvhard"}
#! {"type" => "anon", "offline" => "madvsoft"}
#! {"type" => "anon", "offline" => "madvhard", "access" => "memwrite"}
#! {"type" => "anon", "offline" => "madvsoft", "access" => "memwrite"}
#! {"type" => "shmem", "offline" => "madvhard"}
#! {"type" => "shmem", "offline" => "madvsoft"}

# TODO: shmem + syswrite

TEST_TYPE=devel
TEST_PRIORITY=14

HUGETLBFSDIR=tmp/hugetlbfs

HUGETLBTYPE=<%= param["type"] %>
OFFLINE=<%= param["offline"] %>

<% if param["offline"] == "madvhard" %>
MADVISE=madvise:advice=hwpoison:wait_after=1000
<% elsif param["offline"] == "madvsoft" %>
MADVISE=madvise:advice=soft-offline:wait_after=1000
<% end %>

<% if param["access"] == "syswrite" %>
ACCESS=access:type=syswrite:tag=after_injection
<% elsif param["access"] == "memwrite" %>
ACCESS=access:type=memwrite:tag=after_injection
<% end %>

<% if param["type"] == "free" %>
EXPECTED_RETURN_CODE="ERROR_HANDLE_PASSED"
<% else %>
  <% if param["offline"] == "madvhard" or param["offline"] == "madvsoft" %>
  EXPECTED_RETURN_CODE="MADV_PASS"
  <% elsif param["offline"] == "hard" or param["offline"] == "soft" %>
  EXPECTED_RETURN_CODE="OFFLINE_PASS"
  <% end %>

  <% if param["offline"] == "madvhard" or param["offline"] == "hard" %>
    <% if param["access"] == "memwrite" %>
    EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE SIGBUS"
    <% elsif param["access"] == "syswrite" %>
    KNOWN_FAILURE=true
    EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE ACCESS_ERROR_ADDRESS"
	<% end %>
  <% else %>
    <% if param["access"] %>
    EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE ACCESS_ERROR_ADDRESS"
	<% end %>
  <% end %>
  EXPECTED_RETURN_CODE="$EXPECTED_RETURN_CODE EXIT"
<% end %>

. $TRDIR/lib/setup_1GB_hugetlb.sh
. $TRDIR/lib/setup_mmgeneric.sh
. $TRDIR/lib/mce.sh

PIPETIMEOUT=30
HUGEPAGESIZE=1048576

_prepare() {
	prepare_mm_generic || return 1
	save_nr_corrupted_before
	prepare_1GB_hugetlb || return 1
}

_cleanup() {
	save_nr_corrupted_inject
	cleanup_mm_generic
	cleanup_1GB_hugetlb
}

<% if param["type"] == "free" %>
_control() {
	local pfn="0x$(page-types -b compound_head,huge=compound_head,huge -Nrl | grep -v offset | head -n1 | cut -f1)"

	if [ "$pfn" == 0x ] ; then
		set_return_code NO_HUGETLB
		return 1
	fi

	echo "Target pfn: $pfn"
	echo $[$pfn * 4096] > /sys/devices/system/memory/${OFFLINE}_offline_page
	if [ $? -eq 0 ] ; then
		set_return_code ERROR_HANDLE_PASSED
	else
		set_return_code ERROR_HANDLE_FAILED
	fi
}
<% else %>
_control() {
	<% if param["offline"] == "madvhard" or param["offline"] == "madvsoft" %>
	echo "hugetlb_1gb allocate:type=$HUGETLBTYPE access $MADVISE $ACCESS > $TMPD/.pipe"
	hugetlb_1gb -p $TMPD/.pipe allocate:type=$HUGETLBTYPE access $MADVISE $ACCESS > $TMPD/.pipe &
	<% else %>
	echo "hugetlb_1gb allocate:type=$HUGETLBTYPE access pause:tag=wait_injection $ACCESS > $TMPD/.pipe"
	hugetlb_1gb -p $TMPD/.pipe allocate:type=$HUGETLBTYPE access pause:tag=wait_injection $ACCESS &
	<% end %>
	local pid=$!

	while true ; do
		if ! check_process_status $pid ; then
			set_return_code EXIT
			return
		elif read -t10 line <> ${PIPE} ; then
			echo ">> $line"
			case "$line" in
				"madvise returned 0")
					set_return_code MADV_PASS
					;;
				"madvise returned -1")
					set_return_code MADV_FAIL
					;;
				"pause_wait_injection")
					page-types -p $pid -Nrl -a 0x700000000+10
					echo "$MCEINJECT -p $pid -e ${OFFLINE}-offline -a 0x700000000"
					$MCEINJECT -p $pid -e ${OFFLINE}-offline -a $[0x700000000 + 2]
					if [ "$?" -eq 0 ] ; then
						set_return_code OFFLINE_PASS
					else
						set_return_code OFFLINE_FAIL
					fi
					sleep 0.1
					page-types -p $pid -Nrl -a 0x700000000+10
					kill -SIGUSR1 $pid
					;;
				"Received SIGBUS")
					set_return_code SIGBUS
					sleep 0.1
					;;
				"access_after_injection returned 0")
					set_return_code ACCESS_ERROR_ADDRESS
					;;
				"pause_wait_injection returned 0")
					# Odd timing dependency ...
					sleep 1
					;;
				*)
					;;
			esac
			sleep 0.1
		else
			echo "timeout"
			break;
		fi
	done
}
<% end %>

_check() {
	save_nr_corrupted_unpoison
	check_nr_hwcorrupted
	<% if param["offline"] == "hard" or param["offline"] == "madvhard" %>
	<% if param["type"] == "free" %>
	check_kernel_message "recovery action for free huge page: Recovered"
	<% else %>
	check_kernel_message "recovery action for huge page: Recovered"
	<% end %>
	<% end %>
}
