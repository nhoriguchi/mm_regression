#! {"type" => "file", "offline" => "hard"}
#! {"type" => "file", "offline" => "soft"}
#! {"type" => "file", "offline" => "hard", "access" => "write"}
#! {"type" => "file", "offline" => "soft", "access" => "write"}
#! {"type" => "anon", "offline" => "hard"}
#! {"type" => "anon", "offline" => "soft"}
#! {"type" => "shmem", "offline" => "hard"}
#! {"type" => "shmem", "offline" => "soft"}

#! {"type" => "file", "offline" => "madvhard"}
#! {"type" => "file", "offline" => "madvsoft"}
#! {"type" => "file", "offline" => "madvhard", "access" => "write"}
#! {"type" => "file", "offline" => "madvsoft", "access" => "write"}
#! {"type" => "anon", "offline" => "madvhard"}
#! {"type" => "anon", "offline" => "madvsoft"}
#! {"type" => "shmem", "offline" => "madvhard"}
#! {"type" => "shmem", "offline" => "madvsoft"}

TEST_TYPE=devel
TEST_PRIORITY=16

HUGETLBFSDIR=tmp/hugetlbfs

HUGETLBTYPE=<%= param["type"] %>
OFFLINE=<%= param["offline"] %>

<% if param["offline"] == "madvhard" or param["offline"] == "madvsoft" %>
NR_MADVISE=1
EXPECTED_RETURN_CODE="MADVC_PASS EXIT"
FORK=fork
<% else %>
EXPECTED_RETURN_CODE="OFFLINE_PASS EXIT"
NR_MADVISE=0
FORK=.
<% end %>

<% if param["access"] == "write" %>
ACCESS=write
<% else %>
ACCESS=memset
<% end %>

. $TRDIR/lib/setup_mmgeneric.sh
. $TRDIR/lib/mce.sh

PIPETIMEOUT=30
HUGEPAGESIZE=1048576

_prepare() {
	prepare_mm_generic || return 1
	save_nr_corrupted_before

	if [ ! -f "/sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages" ] ; then
		echo "no 1GB hugetlb directory. abort." >&2
		return 1
	fi

	echo 4 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages || return 1

	[ ! -d "$HUGETLBFSDIR" ] && mkdir -p "$HUGETLBFSDIR"
	mount -t hugetlbfs -o pagesize=1G,size=1G none "$HUGETLBFSDIR"
	find /sys/kernel/mm/hugepages/hugepages-1048576kB -type f | grep hugepages$ | while read f ; do
		echo "$f $(cat $f)"
	done

	if [ "$(cat /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages)" -lt 2 ] ; then
		echo "enough 1GB hugetlb not allocated. abort." >&2
		return 1
	fi
}

_cleanup() {
	save_nr_corrupted_inject
	cleanup_mm_generic

	rm -rf $HUGETLBFSDIR/*
	umount "$HUGETLBFSDIR"
	echo 0 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages
}

_control() {
	echo "+++ offline:$OFFLINE fork:$FORK, access:$ACCESS"
	echo hugetlb_1gb "$NR_MADVISE" "$OFFLINE" "$FORK" "$ACCESS" "$TMPD/.pipe" "$HUGETLBTYPE"
	hugetlb_1gb "$NR_MADVISE" "$OFFLINE" "$FORK" "$ACCESS" "$TMPD/.pipe" "$HUGETLBTYPE" &
	local pid=$!
	# trace-cmd record -p function_graph -P $pid -g free_gigantic_page sleep 10 &

	while read -t5 line <> $TMPD/.pipe ; do
		echo ">> $line"
		case "$line" in
			"madvise 1: 0")
				set_return_code MADV1_PASS
				;;
			"madvise 1: -1")
				set_return_code MADV1_FAIL
				;;
			"madvise 2: 0")
				set_return_code MADV2_PASS
				;;
			"madvise 2: -1")
				set_return_code MADV2_FAIL
				;;
			"child madvise 1: 0")
				set_return_code MADVC_PASS
				;;
			"child madvise 1: -1")
				set_return_code MADVC_FAIL
				;;
			"faultin 1")
				page-types -p $pid -Nrl -a 0x700000000
				kill -SIGUSR1 $pid
				;;
			"faultin 0")
				page-types -p $pid -Nrl -a 0x700000000
				echo "$MCEINJECT -p $pid -e ${OFFLINE}-offline -a 0x700000000"
				$MCEINJECT -p $pid -e ${OFFLINE}-offline -a 0x700000000
				if [ "$?" -eq 0 ] ; then
					set_return_code OFFLINE_PASS
				else
					set_return_code OFFLINE_FAIL
				fi
				sleep 0.1
				kill -SIGUSR1 $pid
				;;
			"wrote after page-offline")
				page-types -p $pid -Nrl -a 0x700000000
				kill -SIGUSR1 $pid
				break
				;;
			*)
				;;
		esac
	done
	set_return_code EXIT
}

_check() {
	save_nr_corrupted_unpoison
	check_nr_hwcorrupted
	<% if param["offline"] == "hard" or param["offline"] == "madvhard" %>
	check_kernel_message "recovery action for huge page: Recovered"
	<% end %>
}
