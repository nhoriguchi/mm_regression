#! {"offline" => "hard"}
#! {"offline" => "soft"}
#! {"offline" => "hard", "fork" => "true"}
#! {"offline" => "soft", "fork" => "true"}
#! {"offline" => "hard", "fork" => "true", "memset" => "true"}

TEST_TYPE=devel
TEST_PRIORITY=16

HUGETLBFSDIR=tmp/hugetlbfs

OFFLINE=<%= param["offline"] %>

<% if param["fork"] == "true" %>
FORK=fork
<% else %>
FORK=.
<% end %>

<% if param["memset"] == "true" %>
MEMSET=fork
<% else %>
MEMSET=.
<% end %>


. $TRDIR/lib/setup_mmgeneric.sh

EXPECTED_RETURN_CODE="OFFLINE_PASS EXIT"
PIPETIMEOUT=30
HUGEPAGESIZE=1048576

_prepare() {
	prepare_mm_generic || return 1
	prepare_system_default

	if [ ! -f "/sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages" ] ; then
		echo "no 1GB hugetlb directory. abort." >&2
		return 1
	fi

	echo 2 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages || return 1

	if [ "$(cat /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages)" -eq 0 ] ; then
		echo "no 1GB hugetlb allocated. abort." >&2
		return 1
	fi

	[ ! -d "$HUGETLBFSDIR" ] && mkdir -p "$HUGETLBFSDIR"
	find /sys/kernel/mm/hugepages/hugepages-1048576kB -type f | while read f ; do
		echo "$f $(cat $f)"
	done
	mount -t hugetlbfs -o pagesize=1G,size=1G none "$HUGETLBFSDIR"
}

_cleanup() {
	cleanup_mm_generic
	cleanup_system_default

	rm -rf $HUGETLBFSDIR/*
	umount "$HUGETLBFSDIR"
	echo 0 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages
}

_control() {
	echo "+++++++ offline:$OFFLINE fork:$FORK, memset:$MEMSET"
	hugetlb_1gb double $OFFLINE $FORK $MEMSET | tee $TMPD/out.$OFFLINE &
	local pid=$!
	sleep 0.1
	if grep -q "ret 1: 0" $TMPD/out.$OFFLINE ; then
		set_return_code OFFLINE_PASS
	fi
	page-types -b huge -Nrl
	kill -SIGUSR1 $pid

	set_return_code EXIT
}

_check() {
	true
}
