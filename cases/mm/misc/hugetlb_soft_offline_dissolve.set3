# This testcase check that when soft offline some page on a hugetlb page,
# all subpages except the offlined 4kB page are dissolved and move back to buddy,
# which is checked by confirming that such page are reusable.
#
# Motivated by the report that when overcommitting is enabled, the target hugepage
# are leaked and free_huge_page() failed to set PageBuddy flag on it.

#! {"flavor" => "none"}
#! {"flavor" => "overcommit"}
#! {"flavor" => "free"}
#! {"flavor" => "full_reserved"}

. $TRDIR/lib/setup_page_migration.sh

TEST_TYPE=normal
TEST_PRIORITY=10

NUMA_NODE=2
HUGEPAGESIZE=2048 # kB

PIPETIMEOUT=10

<% if param["flavor"] == "none" %>
HUGETLB_ALLOCATE=2
HUGETLB=100
HUGETLB_OVERCOMMIT=
EXPECTED_RETURN_CODE="LEAKED DISSOLVED REUSABLE_OK EXIT"
_control() {
	__control_inuse $@
}
<% elsif param["flavor"] == "overcommit" %>
HUGETLB_ALLOCATE=2
HUGETLB=0
HUGETLB_OVERCOMMIT=100
EXPECTED_RETURN_CODE="SET_OVERCOMMIT LEAKED REUSABLE_OK EXIT"
_control() {
	__control_inuse $@
}
<% elsif param["flavor"] == "free" %>
HUGETLB=2
HUGETLB_OVERCOMMIT=
EXPECTED_RETURN_CODE="LEAKED DISSOLVED REUSABLE_OK EXIT"
_control() {
	__control_free $@
}
<% elsif param["flavor"] == "full_reserved" %>
HUGETLB=2
HUGETLB_OVERCOMMIT=
EXPECTED_RETURN_CODE="NOLEAKED DISSOLVED REUSABLE_OK EXIT"
_control() {
	__control_free $@
}
<% end %>

kick_soft_offline() {
	local pfn=$1
	echo $[pfn * 4096] > /sys/devices/system/memory/soft_offline_page
}

check_leak() {
	local pfn=$1
	echo "######### page-types -a $pfn -b =0x0 -lr"
	ruby $TRDIR/lib/get_pagerefcount.rb $pfn
	page-types -a $pfn -b 0xfffff=0x80000 -r | tee $TMPD/check_leak
	local match=$(cat $TMPD/check_leak | grep total | awk '{print $2}')
	local res=NOLEAKED

	if [ "$match" -eq 1 ] ; then
		res=LEAKED
	fi
	echo "$FUNCNAME $pfn: $res"
	set_return_code $res
}

check_dissolve() {
	local pfn=$1
	page-types -a $pfn -b buddy -lr | tee $TMPD/check_dissolve
	local match=$(cat $TMPD/check_dissolve | grep total | awk '{print $2}')
	local res=DISSOLVED_FAIL

	if [ "$match" -eq 1 ] ; then
		res=DISSOLVED
	else
		grep HugePages /proc/meminfo
	fi
	echo "$FUNCNAME $pfn: $res"
	set_return_code $res
}

check_reusable() {
	local pfn=$1

	echo "XXX page-types -a $pfn"
	page-types -a $pfn -b buddy -lr | tee $TMPD/check_reusable
	local match=$(cat $TMPD/check_reusable | grep total | awk '{print $2}')
	local res=REUSABLE_NG
	if [ "$match" -eq 1 ] ; then
		res=REUSABLE_OK
	fi
	if [ "$(ruby $TRDIR/lib/get_pagerefcount.rb $pfn)" -gt 0 ] ; then
		res=REUSABLE_OK
	fi
	echo "$FUNCNAME $pfn: $res"
	set_return_code $res
}

__control_inuse() {
	test_alloc_generic -B hugetlb_anon -N $HUGETLB_ALLOCATE -L 'mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access:wait_after madv_soft:wait_after' &
	sleep 1.0
	if ! pgrep -f test_alloc_generic ; then
		ps axfw
		exit
	fi
	echo "initial page state"
	page-types -p $(pgrep -f test_alloc_generic) -Nrl -b compound_head | grep ^7000 | tee $TMPD/1 >&2
	target1=$(sed -ne 1p $TMPD/1 | cut -f2)
	target2=$(sed -ne 2p $TMPD/1 | cut -f2)
	echo "kick madvise() in test_alloc_generic"
	pkill -SIGUSR1 -f test_alloc_generic
	sleep 1.0
	echo "page state after madv_soft"
	page-types -p $(pgrep -f test_alloc_generic) -Nrl -b compound_head | grep ^7000 | tee $TMPD/2 >&2
	target3=$(sed -ne 1p $TMPD/2 | cut -f2)
	# Another soft offlining via sysfs interface for better coverage.
	# This find the corner case where 2 soft offline events can makes the
	# 1st source hugetlb (freed to buddy after 1st event) leaked.
	echo "soft offline pfn 0x${target2}"
	kick_soft_offline 0x$target2
	sleep 1.0
	echo "page state after soft_offline"
	page-types -a $[0x$target1]+0x200 -a $[0x$target2]+0x200 -a $[0x$target3]+0x200 -Nrl | tee $TMPD/3 >&2

	check_leak 0x$target1
	<% if param["flavor"] == "none" %>
	check_dissolve $[0x$target1+3]
	<% end %>
	check_reusable $[0x$target1+3]

	set_return_code EXIT
}

__control_free() {
	<% if param["flavor"] == "full_reserved" %>
	test_alloc_generic -B hugetlb_anon -N $HUGETLB -L 'mmap:wait_after' &
	<% end %>
	echo "initial page state"
	page-types -Nrl -b huge | grep -v offset | tee $TMPD/1 >&2
	target1=$(sed -ne 1p $TMPD/1 | cut -f1)
	echo "target1 $target1"
	kick_soft_offline 0x$target1
	echo "page state after soft_offline"
	page-types -a 0x$target1+0x200 -Nrl | tee $TMPD/2 >&2
	<% if param["flavor"] == "full_reserved" %>
	pkill -f -9 test_alloc_generic
	echo "page state after kill test_alloc_generic"
	<% end %>
	page-types -a 0x$target1+0x200 -Nrl | tee $TMPD/3 >&2
	set_and_check_hugetlb_pool 0
	echo "page state after shrink pool"
	page-types -a 0x$target1+0x200 -Nrl | tee $TMPD/4 >&2

	# Sometimes following checks fail because the target page has unexpectedly
	# no buddy flag after shrink pool.  Maybe that's due to page freeing is
	# done in batched manner and the target pages are still on the intermediate
	# state. So let's insert a short sleep here to handle it.
	sleep 0.5

	check_leak 0x$target1
	check_dissolve $[0x$target1+3]
	check_reusable $[0x$target1+3]
	set_return_code EXIT
}
