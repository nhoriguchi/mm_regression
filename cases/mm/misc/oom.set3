#! {"reboot" => "on" }
#! {"reboot" => "off" }

<% if param["reboot"] == "on" %>
EXPECTED_RETURN_CODE="REBOOT"
<% else %>
EXPECTED_RETURN_CODE="NOOOM"
<% end %>

# When running this test case in background mode, testcase thread re-run
# without rebooting. So there's some issue on thread handling.

TEST_TYPE=debug
TEST_PRIORITY=20

MAX_REBOOT=1

_prepare() {
	<% if param["reboot"] == "on" %>
	sysctl vm.panic_on_oom=1
	<% end %>
}

_cleanup() {
	sysctl vm.panic_on_oom=0
}

_control() {
	local pid
	local rcount=$(cat $RTMPD/reboot_count)

	if [ "$rcount" -gt 0 ] ; then
		echo "rebooted expectedly."
		set_return_code REBOOT
		return 0
	fi

	local maxmem=$(free | grep ^Mem: | awk '{print $2}')
	local maxswap=$(free | grep ^Swap: | awk '{print $2}')
	local maxbytes=$[(maxmem+maxswap)*2048]

	PIPETIMEOUT=$[2 * maxbytes / 0x40000000]
	echo "Try allocating $maxbytes bytes) to trigger OOM killer ..."
	echo "PIPETIMEOUT=$PIPETIMEOUT"

	test_alloc_generic -B anonymous -N $[maxbytes / 0x100000] -L 'mmap access:wait_after' -p $TMPD/.pipe &
	local pid=$!
	read -t${PIPETIMEOUT} line <> ${PIPE}
	echo "line $line"

	free
	cat /proc/$pid/maps

	if kill -0 $pid 2> /dev/null ; then
		echo "process $pid still exists"
		set_return_code NOOOM
	else
		echo "process $pid is killed"
		set_return_code OOM
		sync
		reboot
	fi
	
	set_return_code EXIT
}
