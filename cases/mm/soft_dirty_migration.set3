#! {"initial" => "clean", "backend" => "anonymous"}
#! {"initial" => "clean", "backend" => "pagecache"}
#! {"initial" => "clean", "backend" => "thp"}
#! {"initial" => "clean", "backend" => "normal_shmem"}
#! {"initial" => "clean", "backend" => "hugetlb_anon"}
#! {"initial" => "dirty", "backend" => "anonymous"}
#! {"initial" => "dirty", "backend" => "pagecache"}
#! {"initial" => "dirty", "backend" => "thp"}
#! {"initial" => "dirty", "backend" => "normal_shmem"}
#! {"initial" => "dirty", "backend" => "hugetlb_anon"}

# NEED: khugepaged focused setting

<% if param["backend"] =~ /hugetlb/ %>
TEST_PRIORITY=20
<% end %>

TEST_TYPE=wip

. $TRDIR/lib/setup_mmgeneric.sh
. $TRDIR/lib/setup_page_migration.sh

INITIAL=<%= param["initial"] %>
BACKEND=<%= param["backend"] %>

if [ "$BACKEND" == thp ] ; then
	THP=true
fi

if [[ "$BACKEND" =~ hugetlb ]] ; then
	HUGETLB=100
fi

NUMA_NODE=2

TEST_PROGRAM="test_alloc_generic -B $BACKEND -N 1 -L 'start mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access access:wait_before:wait_after munmap exit:wait_before'"

if [ "$INITIAL" == clean ] ; then
	EXPECTED_RETURN_CODE="SOFTDIRTY NO_SOFTDIRTY MIGRATION_PASSED NO_SOFTDIRTY SOFTDIRTY EXIT"
else
	EXPECTED_RETURN_CODE="SOFTDIRTY MIGRATION_PASSED SOFTDIRTY SOFTDIRTY EXIT"
fi

_prepare() {
	prepare_mm_generic || return 1
}

_cleanup() {
	cleanup_mm_generic
}

check_soft_dirty() {
	local tag=$1
	local num=

	num=$(grep softdirty $TMPD/pagetypes.$tag.stat | awk 'BEGIN {s=0} {s+=$2} END {print s}')
	if [ "$num" -eq 0 ] ; then
		set_return_code NO_SOFTDIRTY
	else
		set_return_code SOFTDIRTY
	fi
}

_control() {
	local pid="$1"
	local line="$2"

	echo_log "$line"
	case "$line" in
		"before_access")
			get_mm_stats 1 $pid
			check_soft_dirty 1

			if [ "$INITIAL" == clean ] ; then
				clear_soft_dirty $pid
				get_mm_stats 2 $pid
				check_soft_dirty 2
			fi

			# This keep soft dirtiness
			test_numa_move_pages 1 $pid 1 100

			get_mm_stats 3 $pid
			if check_migration_pagemap $TMPD/pagetypes.1 $TMPD/pagetypes.3 ; then
				set_return_code MIGRATION_PASSED
			else
				set_return_code MIGRATION_FAILED
			fi
			check_soft_dirty 3
			kill -SIGUSR1 $pid
			;;
		"after_access")
			get_mm_stats 4 $pid
			check_soft_dirty 4
			kill -SIGUSR1 $pid
			;;
		"before_exit")
			set_return_code EXIT
			kill -SIGUSR1 $pid
			return 0
			;;
		*)
			;;
	esac
	return 1
}

_check() {
	true
}
