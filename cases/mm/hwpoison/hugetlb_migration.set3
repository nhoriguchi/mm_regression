# https://lore.kernel.org/linux-mm/20220421135129.19767-1-linmiaohe@huawei.com/T/#u

#! {"type" => "free-hugepage"}
#! {"type" => "file-hugepage"}

TEST_TYPE=wip
TEST_PRIORITY=10

EXPECTED_RETURN_CODE="HUGETLB_POISONED MEMORY_HOTREMOVE_PASS"

# occupy 80% of free memory with hugetlb pool.
NR_HUGETLB=$[MEMFREE * 80 / 100 / 2048]

_prepare() {
	modprobe hwpoison-inject

	# TODO: proper pool size for hotremove to succeed more likely
	# avoid node-0 if possible to make memory-hotremove succeed more likely
	if [ -e /sys/devices/system/node/node1/hugepages/hugepages-2048kB/nr_hugepages ] ; then
		echo 10000000 > /sys/devices/system/node/node1/hugepages/hugepages-2048kB/nr_hugepages
		NR_HUGETLB=$(cat /sys/devices/system/node/node1/hugepages/hugepages-2048kB/free_hugepages)
	else
		sysctl vm.nr_hugepages=$NR_HUGETLB
	fi

	mkdir -p tmp/hugetlbfs
	mount -t hugetlbfs none tmp/hugetlbfs || return 1
}

_cleanup() {
	rm -f tmp/hugetlbfs/*
	umount -f tmp/hugetlbfs
	sysctl vm.nr_hugepages=0
	# TODO: need to check consistent counter value.
	page-types -b hwpoison -x
}

get_free_hwpoisoned_hugepage() {
	# reserving makes dissolve_free_huge_page fail
	test_alloc_generic -B hugetlb_anon -N $NR_HUGETLB -p $TMPD/.pipe -L "mmap:wait_after" &
	local pid=$!
	read -t10 line <> ${PIPE}
	echo "test_alloc_generic: $line"
	grep -i huge /proc/meminfo
	if ! check_process_status $pid ; then
		echo "Failed to reserve hugetlb pool."
		return 1
	fi
	echo "======="

	# find memory block fulled with hugetlb
	local blocksize="0x$(cat /sys/devices/system/memory/block_size_bytes)"
	local maxnr=0
	local targetblk=0
	echo "blocksize $blocksize"
	for blk in $(find /sys/devices/system/memory/ -type d -maxdepth 1 -mindepth 1 -name memory* | cut -c34- | shuf) ; do
		start_pfn=$[blk * blocksize]
		page-types -b compound_head,huge,hwpoison=compound_head,huge -a $[blk * blocksize / 4096]+$[blocksize / 4096] -lr > $TMPD/.blk.$blk
		#100 page-types -b compound_head,huge,hwpoison=compound_head,huge -a $[(blk + 1) * blocksize / 4096]+$[blocksize / 4096] -lr > $TMPD/.blk.$blk
		count=$(grep total $TMPD/.blk.$blk | awk '{print $2}')
		if [ "$maxnr" -lt "$count" ] ; then
			maxnr=$count
			targetblk=$blk
		fi
		echo "- blk:$blk count:$count"
		if [ "$[count * 4096 * 512]" -eq "$[blocksize]" ] ; then
			break
		fi
	done

	# targetpfn=0x$(head -n1 $TMPD/pagemap.1 | cut -f1)
	targetpfn=0x$(sed -n 2p $TMPD/.blk.$targetblk | cut -f1)
	#100 echo $[targetblk + 1] > $TMPD/targetblk
	#100 echo "target block: $[targetblk + 1]"
	echo $[targetblk] > $TMPD/targetblk
	echo "target block: $[targetblk]"
	echo "target pfn: $(printf '0x%lx\n' $targetpfn)"
	[ "$targetpfn" == 0x ] && return 1
	echo $targetpfn > $TMPD/targetpfn
	head $TMPD/.blk.$targetblk
	page-types -a ${targetpfn}+4 -rlN
	echo $[($targetpfn + 1) * 4096] > /sys/devices/system/memory/hard_offline_page
	page-types -a ${targetpfn}+4 -rlN | tee $TMPD/pagemap.2

	kill -SIGUSR1 $pid
}

get_hwpoisoned_hugepage_filecache() {
	test_alloc_generic -B pagecache -N 1 -w tmp/hugetlbfs -f testfile -p $TMPD/.pipe -L 'mmap access:wait_after' &
	local pid=$!
	read -t10 line <> ${PIPE}
	echo "test_alloc_generic: $line"
	grep -i huge /proc/meminfo
	echo "======="

	page-types -p $pid -a 0x700000000+0x200 -Nrl | tee $TMPD/pagemap.1
	targetpfn=0x$(sed -n 2p $TMPD/pagemap.1 | cut -f2)
	local blocksize="0x$(cat /sys/devices/system/memory/block_size_bytes)"
	# echo $[$targetpfn * 4096 / $blocksize] > $TMPD/targetblk
	echo $[$targetpfn * 4096 / $blocksize] > $TMPD/targetblk
	echo $targetpfn > $TMPD/targetpfn
	echo "target block: $(cat $TMPD/targetblk)"
	echo "target pfn: $targetpfn"
	[ "$targetpfn" == 0x ] && return 1
	# $STAP_DIR/staprun $GTMPD/stap_mark_pghwpoison.ko pfn=$[targetpfn + 1] || return 1
	echo $[($targetpfn + 1) * 4096] > /sys/devices/system/memory/hard_offline_page
	page-types -a ${targetpfn}+512 -rlN | tee $TMPD/pagemap.2

	kill -SIGUSR1 $pid
}

_control() {
	<% if param["type"] == "free-hugepage" %>
	get_free_hwpoisoned_hugepage
	<% else %>
	get_hwpoisoned_hugepage_filecache || return 1
	<% end %>

	# check hwpoison page is still a hugepage.
	if grep -q ___H_G_X___ $TMPD/pagemap.2 ; then
		set_return_code HUGETLB_POISONED
	else
		return 1
	fi

	local targetblock="$(cat $TMPD/targetblk)"
	echo "Try to hotremove target block $targetblock ..."
	sleep 0.1
	bash -c "echo 0 > /sys/devices/system/memory/memory${targetblock}/online"
	if [ $? -eq 0 ] ; then
		set_return_code MEMORY_HOTREMOVE_PASS
		echo "Status of block ${targetblock}: $(cat /sys/devices/system/memory/memory${targetblock}/online)"
		local targetpfn="$(cat $TMPD/targetpfn)"
		page-types -a ${targetpfn}+4 -Nlr
		echo "Reonline block ${targetblock}"
		echo 1 > /sys/devices/system/memory/memory${targetblock}/online
	else
		set_return_code MEMORY_HOTREMOVE_FAIL
	fi

	local targetpfn="$(cat $TMPD/targetpfn)"
	page-types -a ${targetpfn}+4 -Nlr
}
