#! {"type" => "acpi", "hugetlb" => "free"}
#! {"type" => "acpi", "hugetlb" => "hwpoisoned"}
#! {"type" => "sysfs", "hugetlb" => "free"}
#! {"type" => "sysfs", "hugetlb" => "hwpoisoned"}
#! {"type" => "sysfs", "hugetlb" => "hwpoisoned", "unpoison" => "true"}

# Requires to give environment variable VM=

TEST_TYPE=devel
TEST_PRIORITY=10

. $TRDIR/lib/setup_1GB_hugetlb.sh || return 1
. $TRDIR/lib/kvm.sh || return 1

_prepare() {
	if [ ! "$VM" ] ; then
		echo "Environment variable VM= not set. skip this"
		return 1
	fi

	vm_shutdown_wait $VM
	set_vm_maxmemory $VM || return 1
	vm_start_wait $VM || return 1
	start_vm_console_monitor $TMPD/vmconsole $VM

	<% if param["type"] == "acpi" %>
	cat <<EOF > $TMPD/mem.xml
<memory model='dimm'>
  <target>
    <size unit='GiB'>2</size>
    <node>1</node>
  </target>
</memory>
EOF

	ssh $VM lsmem | tee $TMPD/lsmem.1
	virsh attach-device $VM $TMPD/mem.xml --live
	if [ $? -eq 0 ] ; then
		set_return_code HOTPLUG_PASS
	else
		set_return_code HOTPLUG_FAIL
		return 1
	fi

	ssh $VM lsmem | tee $TMPD/lsmem.1a
	if diff -q -U3 $TMPD/lsmem.1 $TMPD/lsmem.1a > /dev/null ; then
		echo "virsh attach succeeded, but memory is not extended."
		return 1
	fi
	<% end %>

	echo "ssh $VM \"echo 0 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages\""
	ssh $VM "echo 0 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages"
	echo "ssh $VM \"echo 10 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages\""
	ssh $VM "echo 10 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages"
	nr_hp=$(ssh $VM cat /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages)
	echo "nr_hugepages in $VM: $nr_hp"

	<% if param["hugetlb"] == "hwpoisoned" %>
	# reserve up all free hugepage
	scp lib/hugetlb_1gb $VM:/usr/local/bin/hugetlb_1gb
	scp build/page-types $VM:/usr/local/bin/page-types
	ssh $VM "pkill -f hugetlb_1gb"
	ssh $VM "hugetlb_1gb -n $nr_hp allocate:type=anon pause" &
	sleep 0.2
	ssh $VM "page-types -b compound_head,huge=compound_head,huge -rl"
	show_1GB_pool $VM
	<% end %>
}

_cleanup() {
	cleanup_1GB_hugetlb
	<% if param["hugetlb"] == "hwpoisoned" %>
	ssh $VM "pkill -f hugetlb_1gb"
	<% end %>

	echo 0 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages

	<% if param["type"] == "acpi" %>
	echo "detaching additional memory blocks"
	virsh detach-device $VM $TMPD/mem.xml --live
	<% else %>
	ssh $VM "modprobe hwpoison-inject; page-types -b hwpoison -x"
	local targetblock=$(cat $TMPD/good_memblock)
	if [ "$targetblock" ] ; then
		timeout --preserve-status -v -s 9 -k 15 15  ssh $VM "echo online > /sys/devices/system/memory/memory$targetblock/state"
	fi
	<% end %>

	[ "$_VM_CONSOLE" ] && pkill -9 -f $_VM_CONSOLE
	show_guest_console
	# vm_shutdown_wait $VM
}

<% if param["type"] == "acpi" %>
EXPECTED_RETURN_CODE="HOTPLUG_PASS HOTREMOVE_PASS HOTPLUG_PASS"

_control() {
	ssh $VM lsmem | tee $TMPD/lsmem.2
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.2

	# assuming that physical address range of the attached memory should
	# be located in the largest address side.
	# TODO: how to get this from the running system?
	local start_pfn=0x250000
	ssh $VM page-types -b compound_head,huge=compound_head,huge -Nrl -a ${start_pfn}, | grep -v offset | tee $TMPD/page-types.2

	if [ "$(cat $TMPD/page-types.2 | wc -l)" -eq 0 ] ; then
		echo "Failed to allocate 1GB hugepage on attached memory."
		return 1
	fi
	local newpfn="0x$(head -n1 $TMPD/page-types.2 | cut -f1)"
	local blksize="0x$(ssh $VM cat /sys/devices/system/memory/block_size_bytes)"
	local pages_in_block="$[blksize >> 12]"
	local blocks_in_1gb="$[(1<<30) / blksize]"
	local target_memblk="$[(newpfn << 12) / blksize]"

	echo "target 1GB hugepage starts at pfn:$newpfn"
	newpfn=$[newpfn - (newpfn % pages_in_block)]
	printf "target memory block starts at pfn:0x%lx\n" $newpfn
	if [ "$blocks_in_1gb" -eq 0 ] ; then
		printf "target 1GB hugepage covers memory block %d\n" $target_memblk
	else
		printf "target 1GB hugepage covers memory block %d to %d\n" $target_memblk $[target_memblk + blocks_in_1gb - 1]
	fi

	echo "===== Injecting error on $newpfn"
	ssh $VM "echo $[newpfn << 12] > /sys/devices/system/memory/hard_offline_page"

	ssh $VM "page-types -b compound_head,huge=compound_head,huge -Nrl"
	ssh $VM "page-types -b hwpoison -Nrl"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.a

	<% if param["hugetlb"] == "hwpoisoned" %>
	# remove reservation to make hotremove succeed.
	echo "Cancel reserving gigantic pages"
	ssh $VM "pkill -f hugetlb_1gb"
	ssh $VM grep ^HugePages /proc/meminfo
	<% end %>

	echo "===== detaching additional memory blocks"
	virsh detach-device $VM $TMPD/mem.xml --live
	if [ $? -eq 0 ] ; then
		set_return_code HOTREMOVE_PASS
	else
		set_return_code HOTREMOVE_FAIL
		return 1
	fi
	sleep 3
	ssh $VM lsmem | tee $TMPD/lsmem.3
	ssh $VM "page-types -b compound_head,huge=compound_head,huge -Nrl"
	ssh $VM "page-types -b hwpoison -Nrl"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.3

	echo "===== re-attaching the memory again"
	virsh attach-device $VM $TMPD/mem.xml --live
	if [ $? -eq 0 ] ; then
		set_return_code HOTPLUG_PASS
	else
		set_return_code HOTPLUG_FAIL
	fi
	sleep 3
	ssh $VM lsmem | tee $TMPD/lsmem.4
	ssh $VM "page-types -b compound_head,huge=compound_head,huge -Nrl"
	ssh $VM "page-types -b hwpoison -Nrl"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.4
}

_check() {
	local hc2=$(awk '{print $2}' $TMPD/meminfo.2)  # initial
	local hca=$(awk '{print $2}' $TMPD/meminfo.a)  # hwpoison injected
	local hc3=$(awk '{print $2}' $TMPD/meminfo.3)  # memblock detached
	local hc4=$(awk '{print $2}' $TMPD/meminfo.4)  # memblock reattached

	count_testcount
	if [ "$[hc2 + 4]" -eq "$hca" ] ; then
		count_success
	else
		count_failure "HardwareCorrupted not incremented by error injection. ($hc2, $hca)"
		return
	fi

	count_testcount
	if [ "$hc2" -eq "$hc3" ] ; then
		count_success
	else
		count_failure "HardwareCorrupted did not get back to the original value by memory hotremove. ($hc2, $hc3)"
		return
	fi

	count_testcount
	if [ "$hc2" -eq "$hc4" ] ; then
		count_success
	else
		count_failure "HardwareCorrupted was incremented again by reattaching memory blocks. ($hc2, $hc4)"
	fi
}
<% else %>
<% if param["hugetlb"] == "hwpoisoned" %>
<% if param["unpoison"] == "true" %>
EXPECTED_RETURN_CODE="HOTREMOVE_PASS HOTPLUG_PASS"
<% else %>
EXPECTED_RETURN_CODE="HOTREMOVE_FAIL"
<% end %>
<% else %>
EXPECTED_RETURN_CODE="HOTREMOVE_PASS HOTPLUG_FAIL"
<% end %>

find_good_memblock_to_hotremove() {
	# Assuming that 1GB hugepage is large enough to cover some memory blocks.
	# So choose the memory block start with head page of some 1GB hugepage.
	cat <<EOF > $TMPD/.script
	page-types -b compound_head,huge=compound_head,huge -Nrl | grep -v offset | cut -f1 > /tmp/1
	head -n1 /tmp/1
EOF
	scp $TMPD/.script $VM:/tmp/a.sh
	ssh $VM bash /tmp/a.sh > $TMPD/target_pfn
}

_control() {
	find_good_memblock_to_hotremove
	if [ -s "$TMPD/target_pfn" ] ; then
		local targetpfn="0x$(cat $TMPD/target_pfn)"
	else
		echo "Failed to find memblock to hotremove."
		return 1
	fi

	ssh $VM lsmem | tee $TMPD/lsmem.1

	local blksize="0x$(ssh $VM cat /sys/devices/system/memory/block_size_bytes)"
	local targetblock="$[(targetpfn << 12) / blksize]"
	echo $targetblock > $TMPD/good_memblock
	printf "newpfn start with 0x%lx (target block: $targetblock)\n" $targetpfn
	echo "===== Injecting error on $targetpfn"
	ssh $VM "echo $[targetpfn * 4096] > /sys/devices/system/memory/hard_offline_page"
	ssh $VM "page-types -b hwpoison -Nrl"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.a

	<% if param["hugetlb"] == "hwpoisoned" %>
	# remove reservation to make hotremove succeed.
	echo "Cancel reserving gigantic pages"
	ssh $VM "pkill -f hugetlb_1gb"
	show_1GB_pool $VM
	<% end %>

	<% if param["unpoison"] == "true" %>
	echo "===== Injecting error on the next memory block"
	ssh $VM "echo $[targetpfn * 4096 + blksize] > /sys/devices/system/memory/hard_offline_page"
	echo "===== Unpoisoning the 1GB hugepage"
	ssh $VM "modprobe hwpoison-inject; page-types -b hwpoison -x"
	echo "===== Shrinking 1GB hugepage pool"
	ssh $VM "echo 0 > /sys/kernel/mm/hugepages/hugepages-1048576kB/nr_hugepages"
	ssh $VM "page-types -a $targetpfn+10 -Nrl"
	show_1GB_pool $VM
	<% end %>

	echo "===== offline memory block $targetblock"
	timeout --preserve-status -v -s 9 -k 15 15 ssh -t $VM "echo offline > /sys/devices/system/memory/memory$targetblock/state"
	if [ $? -eq 0 ] ; then
		set_return_code HOTREMOVE_PASS
	else
		set_return_code HOTREMOVE_FAIL
		return 1
	fi

	ssh $VM lsmem | tee $TMPD/lsmem.3
	ssh $VM "page-types -b hwpoison -Nrl"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.3

	echo "===== re-online memory block $targetblock"
	timeout --preserve-status -v -s 9 -k 15 15 ssh $VM "echo online > /sys/devices/system/memory/memory$targetblock/state"
	if [ $? -eq 0 ] ; then
		set_return_code HOTPLUG_PASS
	else
		set_return_code HOTPLUG_FAIL
	fi

	ssh $VM lsmem | tee $TMPD/lsmem.4
	ssh $VM "page-types -b hwpoison -Nrl"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.4
}

_check() {
	local hca=$(awk '{print $2}' $TMPD/meminfo.a)
	local hc3=$(awk '{print $2}' $TMPD/meminfo.3)
	local hc4=$(awk '{print $2}' $TMPD/meminfo.4)

	echo "hca:$hca, hc3:$hc3, hc4:$hc4"
}
<% end %>
