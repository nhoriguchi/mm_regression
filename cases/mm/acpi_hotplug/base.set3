#! {"type" => "acpi"}
#! {"type" => "sysfs"}

# Requires to give environment variable VM=

TEST_TYPE=wip,kvm
TEST_PRIORITY=10

EXPECTED_RETURN_CODE="HOTPLUG_PASS HOTREMOVE_PASS HOTPLUG_PASS"

. $TRDIR/lib/kvm.sh || return 1

_prepare() {
	vm_shutdown_wait $VM
	vm_start_wait $VM || return 1
	start_vm_console_monitor $TMPD/vmconsole $VM
}

_cleanup() {
	[ "$_VM_CONSOLE" ] && pkill -9 -f $_VM_CONSOLE
	show_guest_console
	vm_shutdown_wait $VM
}

_control() {
	cat <<EOF > $TMPD/.mem.xml
<memory model='dimm'>
  <target>
    <size unit='MiB'>256</size>
    <node>0</node>
  </target>
</memory>
EOF

	ssh $VM lsmem | tee $TMPD/lsmem.1

	virsh attach-device $VM $TMPD/.mem.xml --live
	if [ $? -eq 0 ] ; then
		set_return_code HOTPLUG_PASS
	else
		set_return_code HOTPLUG_FAIL
		return 1
	fi

	ssh $VM lsmem | tee $TMPD/lsmem.2
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.2

	diff -U0 $TMPD/lsmem.1 $TMPD/lsmem.2 > $TMPD/lsmem.diff
	# when no diff?
	local newpaddr="$(grep ^-0x0 $TMPD/lsmem.diff | sed 's/[-+]/ /g' | awk '{print $2}' | tail -n1)"
	newpaddr=$[newpaddr + 1]
	printf "newpfn start with 0x%lx\n" $newpaddr
	ssh $VM "echo $newpaddr > /sys/devices/system/memory/hard_offline_page"
	ssh $VM "page-types -b hwpoison -Nrl"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.a

	<% if param["type"] == "acpi" %>
	echo "detaching additional memory blocks"
	virsh detach-device $VM $TMPD/.mem.xml --live
	<% else %>
	local blksize="0x$(cat /sys/devices/system/memory/block_size_bytes)"
	local targetblock=$[$newpaddr / $blksize]
	echo "offline memory block $targetblock"
	echo offline > /sys/devices/system/memory/memory$targetblock/state
	<% end %>
	if [ $? -eq 0 ] ; then
		set_return_code HOTREMOVE_PASS
	else
		set_return_code HOTREMOVE_FAIL
	fi

	ssh $VM lsmem | tee $TMPD/lsmem.3
	ssh $VM "page-types -b hwpoison -Nrl"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.3

	<% if param["type"] == "acpi" %>
	echo "re-attaching the memory again"
	virsh attach-device $VM $TMPD/.mem.xml --live
	<% else %>
	echo "re-online memory block $targetblock"
	echo online > /sys/devices/system/memory/memory$targetblock/state
	<% end %>
	if [ $? -eq 0 ] ; then
		set_return_code HOTPLUG_PASS
	else
		set_return_code HOTPLUG_FAIL
	fi

	ssh $VM lsmem | tee $TMPD/lsmem.4
	ssh $VM "page-types -b hwpoison"
	ssh $VM grep -i HardwareCorrupted /proc/meminfo | tee $TMPD/meminfo.4
}

_check() {
	local hc2=$(awk '{print $2}' $TMPD/meminfo.2)
	local hca=$(awk '{print $2}' $TMPD/meminfo.a)
	local hc3=$(awk '{print $2}' $TMPD/meminfo.3)
	local hc4=$(awk '{print $2}' $TMPD/meminfo.4)

	count_testcount
	if [ "$[hc2 + 4]" -eq "$hca" ] ; then
		count_success
	else
		count_failure "HardwareCorrupted not incremented by error injection. ($hc2, $hca)"
	fi

	count_testcount
	if [ "$hc2" -eq "$hc3" ] ; then
		count_success
	else
		count_failure "HardwareCorrupted did not get back to the original value by memory hotremove. ($hc2, $hc3)"
	fi

	count_testcount
	if [ "$hc2" -eq "$hc4" ] ; then
		count_success
	else
		count_failure "HardwareCorrupted was incremented again by reattaching memory blocks. ($hc2, $hc4)"
	fi
}
