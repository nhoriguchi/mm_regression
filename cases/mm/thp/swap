#!1 THP_TYPE: base

. $TRDIR/lib/setup_mmgeneric.sh
. $TRDIR/lib/setup_memcg.sh
. $TRDIR/lib/setup_thp.sh

TEST_TYPE=wip

MAPTYPE=mmap
FORK=
SPLIT_THP=

NR_THP=16 # 32MB

TEST_PROGRAM="test_alloc_generic -B thp -N $NR_THP -L 'start:wait_after $MAPTYPE access $FORK $SPLIT_THP noop:wait_after access:tag=1:wait_after munmap exit:wait_before'"
EXPECTED_RETURN_CODE="EXIT"

_prepare() {
    local swapfile=$TDIR/swapfile
    set_thp_always

	# 400MB
	create_cgroup || return 1
    dd if=/dev/zero of=$swapfile bs=4096 count=10240 > /dev/null 2>&1
    [ $? -ne 0 ] && echo "failed to create $swapfile" && return 1
    mkswap $swapfile
    chmod 0600 $swapfile
    swapon $swapfile
    count_testcount
    if swapon -s | grep ^$swapfile > /dev/null ; then
        count_success "create swapfile"
    else
        count_failure "create swapfile"
    fi

	if [ "$CGROUPVER" = v1 ] ; then
		set_cgroup_value memory test1 memory.limit_in_bytes 0x4000000 || return 1
		set_cgroup_value memory test1 memory.memsw.limit_in_bytes 0x8000000 || return 1
	elif [ "$CGROUPVER" = v2 ] ; then
		set_cgroup_value test1 memory.max 0x4000000 || return 1
		set_cgroup_value test1 memory.swap.high 0x8000000 || return 1
	fi

    echo 3 > /proc/sys/vm/drop_caches
    return 0
}

_cleanup() {
	echo "clean up..."
    swapoff $TDIR/swapfile
    rm -rf $TDIR/swapfile
	delete_cgroup
}

_control() {
    local pid="$1"
    local line="$2"

    echo_log "$line"
    case "$line" in
        "after_start")
			move_process_cgroup test1 $pid || set_return_code CGCLASSIFY_FAIL
            kill -SIGUSR1 $pid
            ;;
        "after_noop")
			echo "--> trigger swapout"
			if [ "$CGROUPVER" = v1 ] ; then
				set_cgroup_value memory test1 memory.limit_in_bytes 0x1000000 || return 1
			elif [ "$CGROUPVER" = v2 ] ; then
				set_cgroup_value test1 memory.high 0x1000000 || set_return_code CGSET_FAIL
				set_cgroup_value test1 memory.max  0x1000000 || set_return_code CGSET_FAIL
				cat $CGDIR/test1/memory.high
				cat $CGDIR/test1/memory.max
			fi
			get_mm_stats 1 $pid
			if [ "$CGROUPVER" = v1 ] ; then
				set_cgroup_value memory test1 memory.limit_in_bytes 0x8000000 || return 1
			elif [ "$CGROUPVER" = v2 ] ; then
				set_cgroup_value test1 memory.max 0x8000000 || set_return_code CGSET_FAIL
			fi
            kill -SIGUSR1 $pid
            ;;
        "after_access_1")
			echo "--> trigger swapin"
			get_mm_stats 2 $pid
            kill -SIGUSR1 $pid
            ;;
		"before_exit")
            kill -SIGUSR1 $pid
            set_return_code EXIT
            return 0
            ;;
        *)
            ;;
    esac
    return 1
}

_check() {
    FALSENEGATIVE=true
    count_testcount
    if [ "$(grep ^Swap: $TMPD/smaps.1 2> /dev/null | awk '{print $2}')" -gt 0 ] ; then
        count_success "swap used"
    else
        count_failure "swap not used"
    fi
    count_testcount
    if [ "$(grep ^Swap: $TMPD/smaps.2 2> /dev/null | awk '{print $2}')" -eq 0 ] ; then
        count_success "swapped in forcibly"
    else
        count_failure "swap still remains ($(grep ^Swap: $TMPD/smaps.2 | awk '{print $2}') kB) after madvise(MADV_WILLNEED)"
    fi
    FALSENEGATIVE=false

    count_testcount
    local sc1=$(grep ^SwapCached: $TMPD/meminfo.1 2> /dev/null | awk '{print $2}')
    local sc2=$(grep ^SwapCached: $TMPD/meminfo.2 2> /dev/null | awk '{print $2}')
    if [ "$sc1" -gt "$sc2" ] ; then
        count_success "swapcached becomes anonymous pages"
    else
        count_failure "swapcached didn't become anonymous pages"
    fi
}
