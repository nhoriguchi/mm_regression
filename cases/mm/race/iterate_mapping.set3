#! {"backend" => "anonymous", "error" => "hard-offline"}
#! {"backend" => "anonymous", "error" => "soft-offline"}
#! {"backend" => "pagecache", "error" => "hard-offline"}
#! {"backend" => "pagecache", "error" => "soft-offline"}
#! {"backend" => "ksm", "error" => "hard-offline"}
#! {"backend" => "ksm", "error" => "soft-offline"}
#! {"backend" => "zero", "error" => "hard-offline"}
#! {"backend" => "zero", "error" => "soft-offline"}
#! {"backend" => "hugetlb_anon", "error" => "hard-offline"}
#! {"backend" => "hugetlb_anon", "error" => "soft-offline"}
#! {"backend" => "hugetlb_file", "error" => "hard-offline"}
#! {"backend" => "hugetlb_file", "error" => "soft-offline"}
#! {"backend" => "thp", "error" => "hard-offline"}
#! {"backend" => "thp", "error" => "soft-offline"}

TEST_TYPE=stress

# Not care about head/tail difference for now.
TEST_PRIORITY=10

. $TRDIR/lib/setup_mce_test.sh || exit 1

BACKEND=<%= param["backend"] %>
ERROR_TYPE=<%= param["error"] %>
TARGET_PAGEFLAGS=$(get_backend_pageflags $BACKEND)

RACE_ITERATIONS=100
MONARCH_TIMEOUT=20000000

<% if param["backend"] =~ /zero/ %>
SKIP_THIS_TEST=true
<% end %>

# TODO: goto common place
<% if param["backend"] == "thp" %>
THP=10
MEMSIZE="-N 10"
<% elsif param["backend"] =~ /hugetlb/ %>
HUGETLB=100
HUGEPAGESIZE=2048 # kB
MEMSIZE="-N 10"
<% else %>
MEMSIZE="-n 10"
<% end %>

EXPECTED_RETURN_CODE="EXIT"

_prepare() {
	flagmask="$(get_backend_pageflags_mask_value $BACKEND)"
	maskbits="$(echo $flagmask | cut -f1 -d,)"
	valuebits="$(echo $flagmask | cut -f2 -d,)"

	<% if param["backend"] =~ /hugetlb/ %>
	sysctl vm.nr_hugepages=20
	<% end %>

	echo "set hwpoison-filter for $BACKEND (mask:$maskbits, value:$valuebits)"
	echo $maskbits > $DEBUGFSDIR/hwpoison/corrupt-filter-flags-mask
	echo $valuebits > $DEBUGFSDIR/hwpoison/corrupt-filter-flags-value
	echo 1 > $DEBUGFSDIR/hwpoison/corrupt-filter-enable
	trap '' BUS
	return 0
}

_cleanup() {
	trap -- BUS
	<% if param["backend"] =~ /hugetlb/ %>
	sysctl vm.nr_hugepages=0
	<% end %>
	echo 0 > $DEBUGFSDIR/hwpoison/corrupt-filter-enable
}

_control() {
	local pid=

	echo ">>> PID of controlling process $$, pageflag:$TARGET_PAGEFLAGS"

	echo "5 4 1 5" > /proc/sys/kernel/printk
	for i in $(seq $RACE_ITERATIONS) ; do
		test_alloc_generic -B $BACKEND $MEMSIZE -L iterate_mapping &
		pid=$!

		get_pagetypes $pid pagetypes.1 -b "$TARGET_PAGEFLAGS" -Nrla 0x700000000+0x1000 > /dev/null
		# cat $TMPD/pagetypes.1 | cut -f2 | wc -l
		# echo ">>> PID $$ iter $i"
		cat $TMPD/pagetypes.1 | cut -f2 | head -n1 | while read line ; do
			$MCEINJECT -q -e $ERROR_TYPE -a 0x$line &
		done

		kill_all_subprograms $BASHPID
	done
	echo "7 4 1 7" > /proc/sys/kernel/printk
	set_return_code EXIT
}

_check() {
	check_kernel_message -v "kernel panic"
}
